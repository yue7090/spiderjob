// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	// protobuf "google/protobuf"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpiderjobClient is the client API for Spiderjob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpiderjobClient interface {
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	ExecutionDone(ctx context.Context, in *ExecutionDoneRequest, opts ...grpc.CallOption) (*ExecutionDoneResponse, error)
	Leave(ctx context.Context, in *protobuf.Empty, opts ...grpc.CallOption) (*protobuf.Empty, error)
	SetJob(ctx context.Context, in *SetJobRequest, opts ...grpc.CallOption) (*SetJobResponse, error)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error)
	RunJob(ctx context.Context, in *RunJobRequest, opts ...grpc.CallOption) (*RunJobResponse, error)
	ToggleJob(ctx context.Context, in *ToggleJobRequest, opts ...grpc.CallOption) (*ToggleJobResponse, error)
	RaftGetConfiguration(ctx context.Context, in *protobuf.Empty, opts ...grpc.CallOption) (*RaftGetConfigurationResponse, error)
	RaftRemovePeerByID(ctx context.Context, in *RaftRemovePeerByIDRequest, opts ...grpc.CallOption) (*protobuf.Empty, error)
	GetActiveExecutions(ctx context.Context, in *protobuf.Empty, opts ...grpc.CallOption) (*GetActiveExecutionsResponse, error)
	SetExecution(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*protobuf.Empty, error)
}

type spiderjobClient struct {
	cc grpc.ClientConnInterface
}

func NewSpiderjobClient(cc grpc.ClientConnInterface) SpiderjobClient {
	return &spiderjobClient{cc}
}

func (c *spiderjobClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, "/types.Spiderjob/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderjobClient) ExecutionDone(ctx context.Context, in *ExecutionDoneRequest, opts ...grpc.CallOption) (*ExecutionDoneResponse, error) {
	out := new(ExecutionDoneResponse)
	err := c.cc.Invoke(ctx, "/types.Spiderjob/ExecutionDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderjobClient) Leave(ctx context.Context, in *protobuf.Empty, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, "/types.Spiderjob/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderjobClient) SetJob(ctx context.Context, in *SetJobRequest, opts ...grpc.CallOption) (*SetJobResponse, error) {
	out := new(SetJobResponse)
	err := c.cc.Invoke(ctx, "/types.Spiderjob/SetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderjobClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error) {
	out := new(DeleteJobResponse)
	err := c.cc.Invoke(ctx, "/types.Spiderjob/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderjobClient) RunJob(ctx context.Context, in *RunJobRequest, opts ...grpc.CallOption) (*RunJobResponse, error) {
	out := new(RunJobResponse)
	err := c.cc.Invoke(ctx, "/types.Spiderjob/RunJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderjobClient) ToggleJob(ctx context.Context, in *ToggleJobRequest, opts ...grpc.CallOption) (*ToggleJobResponse, error) {
	out := new(ToggleJobResponse)
	err := c.cc.Invoke(ctx, "/types.Spiderjob/ToggleJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderjobClient) RaftGetConfiguration(ctx context.Context, in *protobuf.Empty, opts ...grpc.CallOption) (*RaftGetConfigurationResponse, error) {
	out := new(RaftGetConfigurationResponse)
	err := c.cc.Invoke(ctx, "/types.Spiderjob/RaftGetConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderjobClient) RaftRemovePeerByID(ctx context.Context, in *RaftRemovePeerByIDRequest, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, "/types.Spiderjob/RaftRemovePeerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderjobClient) GetActiveExecutions(ctx context.Context, in *protobuf.Empty, opts ...grpc.CallOption) (*GetActiveExecutionsResponse, error) {
	out := new(GetActiveExecutionsResponse)
	err := c.cc.Invoke(ctx, "/types.Spiderjob/GetActiveExecutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderjobClient) SetExecution(ctx context.Context, in *Execution, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, "/types.Spiderjob/SetExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpiderjobServer is the server API for Spiderjob service.
// All implementations must embed UnimplementedSpiderjobServer
// for forward compatibility
type SpiderjobServer interface {
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	ExecutionDone(context.Context, *ExecutionDoneRequest) (*ExecutionDoneResponse, error)
	Leave(context.Context, *protobuf.Empty) (*protobuf.Empty, error)
	SetJob(context.Context, *SetJobRequest) (*SetJobResponse, error)
	DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error)
	RunJob(context.Context, *RunJobRequest) (*RunJobResponse, error)
	ToggleJob(context.Context, *ToggleJobRequest) (*ToggleJobResponse, error)
	RaftGetConfiguration(context.Context, *protobuf.Empty) (*RaftGetConfigurationResponse, error)
	RaftRemovePeerByID(context.Context, *RaftRemovePeerByIDRequest) (*protobuf.Empty, error)
	GetActiveExecutions(context.Context, *protobuf.Empty) (*GetActiveExecutionsResponse, error)
	SetExecution(context.Context, *Execution) (*protobuf.Empty, error)
	mustEmbedUnimplementedSpiderjobServer()
}

// UnimplementedSpiderjobServer must be embedded to have forward compatible implementations.
type UnimplementedSpiderjobServer struct {
}

func (UnimplementedSpiderjobServer) GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedSpiderjobServer) ExecutionDone(context.Context, *ExecutionDoneRequest) (*ExecutionDoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutionDone not implemented")
}
func (UnimplementedSpiderjobServer) Leave(context.Context, *protobuf.Empty) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedSpiderjobServer) SetJob(context.Context, *SetJobRequest) (*SetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJob not implemented")
}
func (UnimplementedSpiderjobServer) DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedSpiderjobServer) RunJob(context.Context, *RunJobRequest) (*RunJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunJob not implemented")
}
func (UnimplementedSpiderjobServer) ToggleJob(context.Context, *ToggleJobRequest) (*ToggleJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleJob not implemented")
}
func (UnimplementedSpiderjobServer) RaftGetConfiguration(context.Context, *protobuf.Empty) (*RaftGetConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaftGetConfiguration not implemented")
}
func (UnimplementedSpiderjobServer) RaftRemovePeerByID(context.Context, *RaftRemovePeerByIDRequest) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaftRemovePeerByID not implemented")
}
func (UnimplementedSpiderjobServer) GetActiveExecutions(context.Context, *protobuf.Empty) (*GetActiveExecutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveExecutions not implemented")
}
func (UnimplementedSpiderjobServer) SetExecution(context.Context, *Execution) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExecution not implemented")
}
func (UnimplementedSpiderjobServer) mustEmbedUnimplementedSpiderjobServer() {}

// UnsafeSpiderjobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpiderjobServer will
// result in compilation errors.
type UnsafeSpiderjobServer interface {
	mustEmbedUnimplementedSpiderjobServer()
}

func RegisterSpiderjobServer(s grpc.ServiceRegistrar, srv SpiderjobServer) {
	s.RegisterService(&Spiderjob_ServiceDesc, srv)
}

func _Spiderjob_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderjobServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Spiderjob/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderjobServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spiderjob_ExecutionDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderjobServer).ExecutionDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Spiderjob/ExecutionDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderjobServer).ExecutionDone(ctx, req.(*ExecutionDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spiderjob_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderjobServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Spiderjob/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderjobServer).Leave(ctx, req.(*protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spiderjob_SetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderjobServer).SetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Spiderjob/SetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderjobServer).SetJob(ctx, req.(*SetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spiderjob_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderjobServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Spiderjob/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderjobServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spiderjob_RunJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderjobServer).RunJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Spiderjob/RunJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderjobServer).RunJob(ctx, req.(*RunJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spiderjob_ToggleJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderjobServer).ToggleJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Spiderjob/ToggleJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderjobServer).ToggleJob(ctx, req.(*ToggleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spiderjob_RaftGetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderjobServer).RaftGetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Spiderjob/RaftGetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderjobServer).RaftGetConfiguration(ctx, req.(*protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spiderjob_RaftRemovePeerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftRemovePeerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderjobServer).RaftRemovePeerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Spiderjob/RaftRemovePeerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderjobServer).RaftRemovePeerByID(ctx, req.(*RaftRemovePeerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spiderjob_GetActiveExecutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderjobServer).GetActiveExecutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Spiderjob/GetActiveExecutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderjobServer).GetActiveExecutions(ctx, req.(*protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spiderjob_SetExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Execution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderjobServer).SetExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Spiderjob/SetExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderjobServer).SetExecution(ctx, req.(*Execution))
	}
	return interceptor(ctx, in, info, handler)
}

// Spiderjob_ServiceDesc is the grpc.ServiceDesc for Spiderjob service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Spiderjob_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "types.Spiderjob",
	HandlerType: (*SpiderjobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJob",
			Handler:    _Spiderjob_GetJob_Handler,
		},
		{
			MethodName: "ExecutionDone",
			Handler:    _Spiderjob_ExecutionDone_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Spiderjob_Leave_Handler,
		},
		{
			MethodName: "SetJob",
			Handler:    _Spiderjob_SetJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _Spiderjob_DeleteJob_Handler,
		},
		{
			MethodName: "RunJob",
			Handler:    _Spiderjob_RunJob_Handler,
		},
		{
			MethodName: "ToggleJob",
			Handler:    _Spiderjob_ToggleJob_Handler,
		},
		{
			MethodName: "RaftGetConfiguration",
			Handler:    _Spiderjob_RaftGetConfiguration_Handler,
		},
		{
			MethodName: "RaftRemovePeerByID",
			Handler:    _Spiderjob_RaftRemovePeerByID_Handler,
		},
		{
			MethodName: "GetActiveExecutions",
			Handler:    _Spiderjob_GetActiveExecutions_Handler,
		},
		{
			MethodName: "SetExecution",
			Handler:    _Spiderjob_SetExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spiderjob.proto",
}

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	AgentRun(ctx context.Context, in *AgentRunRequest, opts ...grpc.CallOption) (Agent_AgentRunClient, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) AgentRun(ctx context.Context, in *AgentRunRequest, opts ...grpc.CallOption) (Agent_AgentRunClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], "/types.Agent/AgentRun", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentAgentRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_AgentRunClient interface {
	Recv() (*AgentRunStream, error)
	grpc.ClientStream
}

type agentAgentRunClient struct {
	grpc.ClientStream
}

func (x *agentAgentRunClient) Recv() (*AgentRunStream, error) {
	m := new(AgentRunStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	AgentRun(*AgentRunRequest, Agent_AgentRunServer) error
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) AgentRun(*AgentRunRequest, Agent_AgentRunServer) error {
	return status.Errorf(codes.Unimplemented, "method AgentRun not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_AgentRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentRunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).AgentRun(m, &agentAgentRunServer{stream})
}

type Agent_AgentRunServer interface {
	Send(*AgentRunStream) error
	grpc.ServerStream
}

type agentAgentRunServer struct {
	grpc.ServerStream
}

func (x *agentAgentRunServer) Send(m *AgentRunStream) error {
	return x.ServerStream.SendMsg(m)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "types.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AgentRun",
			Handler:       _Agent_AgentRun_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spiderjob.proto",
}
